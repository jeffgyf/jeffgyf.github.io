{"version":3,"sources":["reportWebVitals.ts","UserEvent.ts","UserEventStore.ts","UserEventManager.ts","EventDialog.tsx","Timer.tsx","EventList.tsx","LoggingMode.tsx","TimeUtil.tsx","plots/Bar.tsx","Dashboard.tsx","App.tsx","pages/Debug.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","UserEvent","startTime","title","undefined","endTime","tags","Set","this","getTime","UserEventStore","userEvents","transformedUserEvents","map","e","serializedUserEvents","JSON","stringify","localStorage","setItem","getItem","parse","element","v","Date","instance","store","loadUserEvents","forEach","t","add","event","push","saveEvents","now","events","titles","i","j","day","moment","toDateString","hour","Math","floor","random","minute","duration","tag","newEvent","toDate","concat","saveUserEvents","EventDialog","state","hidden","inputProps","onBlur","ev","console","log","onFocus","suggestedTags","item","key","name","Dialog","props","className","Label","toLocaleTimeString","getTimeDiff","TextField","placeholder","onChange","val","setState","TagPicker","removeButtonAriaLabel","selectionAriaLabel","onResolveSuggestions","filterText","tagList","suggestion","filter","toLowerCase","indexOf","length","some","compareTag","listContainsTagList","items","onItemSelected","getTextFromItem","pickerSuggestionsProps","suggestionsHeaderText","noResultsFoundText","disabled","id","DialogFooter","PrimaryButton","text","onClick","onSubmit","DefaultButton","onCancel","timespan","timespan2","hours","min","minutes","UserEventManager","getEvents","latestUserEvent","hideDialog","React","Component","delay","second","Promise","resolve","setTimeout","Timer","timer","started","startTimer","a","showColon","EventList","filterEvent","_columns","fieldName","minWidth","maxWidth","isResizable","idx","toTimeString","join","reduce","prev","curr","Stack","verticalFill","tokens","childrenGap","Array","isArray","every","has","ScrollablePane","scrollbarVisibility","ScrollbarVisibility","auto","DetailsList","compact","columns","setKey","layoutMode","DetailsListLayoutMode","justified","selectionMode","SelectionMode","none","constrainMode","ConstrainMode","unconstrained","onRenderDetailsHeader","onItemInvoked","ariaLabelForSelectionColumn","ariaLabelForSelectAllCheckbox","checkButtonAriaLabel","detailsHeaderProps","defaultRender","Sticky","stickyPosition","StickyPositionType","Both","onRenderColumnHeaderTooltip","tooltipHostProps","TooltipHost","LoggingMode","cookie","document","onGoingEvent","initializeIsPlaying","horizontal","onStopClicked","allowDisabledFocus","FontIcon","iconName","onStartClicked","hideSubmitDialog","restartPlay","startPlay","currentTime","addEvent","showSubmitDialog","TimeUtil","date","getMonth","getDate","FlexibleXYPlot","makeWidthFlexible","XYPlot","groupBy","array","keySelector","rv","x","s","get","set","Map","Bar","eventByType","timeByEventDay","from","keys","type","eventsByDay","GetMonthDay","times","y","getDuration","asHours","eventTypes","eventColorMap","toString","animation","xType","stackBy","height","eventType","orientation","color","barWidth","data","Dashboard","App","isPanelOpen","selectedMode","app","Panel","isLightDismiss","isOpen","onDismiss","headerText","PanelType","smallFixedNear","CommandBarButton","Debug","eventName","substr","clearEvents","generateRandomEvents","filterSuggestedTags","itemLimit","testTags","Home","to","initializeIcons","ReactDOM","render","exact","path","getElementById"],"mappings":"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","file":"static/js/main.cf499ae6.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","export interface IUserEventObject {\n    title: string;\n    startTime: string;\n    endTime?: string;\n    tags: string[];\n}\n\nexport class UserEvent {\n    public title: string | undefined;\n    public startTime: Date;\n    public endTime?: Date;\n    public tags: Set<string> = new Set();\n\n    constructor(startTime: Date, title: string | undefined = undefined) {\n        this.title = title;\n        this.startTime = startTime;\n    }\n\n    public getDuration(): number | undefined {\n        return this.endTime === undefined ? undefined : (this.endTime.getTime() - this.startTime.getTime());\n    }\n}\n","import { UserEvent, IUserEventObject } from \"./UserEvent\"\n\nexport class UserEventStore {\n    saveUserEvents(userEvents: UserEvent[]) {\n        let transformedUserEvents = userEvents.map(e => {\n            return {\n                title: e.title,\n                startTime: e.startTime,\n                endTime: e.endTime,\n                tags: [...e.tags], // JSON.stringify() cannot serialize Set\n            };\n        });\n\n        let serializedUserEvents = JSON.stringify(transformedUserEvents);\n        localStorage.setItem(\"data\", serializedUserEvents);\n    }\n\n    loadUserEvents(): UserEvent[] {\n        let serializedUserEvents = localStorage.getItem(\"data\");\n        if (serializedUserEvents) {\n            let data = JSON.parse(serializedUserEvents) as IUserEventObject[];\n            let result = data.map((element) => {\n                let v = new UserEvent(new Date(element.startTime), element.title);\n                if (element.endTime !== undefined)\n                {\n                    v.endTime = new Date(element.endTime); // JSON.parse() cannot parse Date\n                }\n                v.tags = new Set(element.tags);\n                return v;\n            });\n            return result;\n        }\n        return [];\n    }\n}","import { UserEvent } from \"./UserEvent\"\nimport { UserEventStore } from \"./UserEventStore\";\nimport moment from 'moment';\n\nclass UserEventManager {\n    userEvents: UserEvent[] = [];\n    tags: Set<string> = new Set();\n\n    constructor() {\n        let store = new UserEventStore();\n        this.userEvents = store.loadUserEvents();\n        this.userEvents.forEach(e => {\n            e.tags.forEach(t => {\n                this.tags.add(t);\n            })\n        });\n    }\n\n    addEvent(event: UserEvent): void {\n        this.userEvents.push(event);\n        event.tags.forEach(t => {\n            this.tags.add(t);\n        });\n\n        this.saveEvents();\n    }\n\n    getEvents(): UserEvent[] {\n        return [...this.userEvents];\n    }\n\n    // getEventsByTags(tags: Set<string>): UserEvent[] {\n    //     return this.userEvents.filter(x => {\n    //         const intersection = Array.from(tags).filter(t => !x.tags.has(t));\n    //         return intersection.length > 0;\n    //     });\n    // }\n\n    getTags(): string[] {\n        return [...this.tags];\n    }\n\n    clearEvents(): void {\n        this.userEvents = [];\n\n        this.saveEvents();\n    }\n\n    generateRandomEvents() {\n        let now = new Date();\n        let ago = 7;\n        let events: UserEvent[] = [];\n        let titles = [\"A\", \"B\", \"C\", \"D\", \"E\"];\n        let tags = [\"tagA\", \"tagB\", \"tagC\"];\n        for (let i = 0; i < 7; ++i) {\n            for (let j = 0; j < 5; ++j) {\n                let day = moment(now.toDateString()).add(-ago + i, \"d\");\n                let hour = Math.floor(Math.random() * 24);\n                let minute = Math.floor(Math.random() * 60);\n                let startTime = day.add(hour, \"h\").add(minute, \"m\");\n                let duration = Math.floor(Math.random() * 200);\n                let tag = tags[Math.floor(Math.random() * 3)];\n                let title = titles[Math.floor(Math.random() * 5)];\n\n                let newEvent = new UserEvent(startTime.toDate());\n                newEvent.endTime = startTime.add(duration, \"m\").toDate();\n                newEvent.tags = new Set([tag]);\n                newEvent.title = title;\n\n                events.push(newEvent);\n            }\n        }\n        this.userEvents = this.userEvents.concat(events);\n        this.saveEvents()\n    }\n\n    private saveEvents() {\n        let store = new UserEventStore();\n        store.saveUserEvents(this.userEvents);\n    }\n}\n\nexport const instance = new UserEventManager();\n","import './EventDialog.scss';\n\nimport { Dialog, DialogFooter, Label, TagPicker, IInputProps, IBasePickerSuggestionsProps, ITag, TextField } from '@fluentui/react';\nimport { DefaultButton, PrimaryButton } from '@fluentui/react/lib/Button';\nimport React from 'react';\nimport moment from 'moment';\n\nimport * as UserEventManager from \"./UserEventManager\"\nimport { UserEventStore } from './UserEventStore';\n\nclass EventDialog extends React.Component<{ hidden: boolean, startTime?: Date, endTime?: Date, hideDialog: () => void, restartPlay: () => void }> {\n    state = {\n        title: \"\",\n        tags: [],\n        hidden: false\n    };\n\n    render() {\n        const inputProps: IInputProps = {\n            onBlur: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onBlur called'),\n            onFocus: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onFocus called'),\n        };\n\n        const pickerSuggestionsProps: IBasePickerSuggestionsProps = {\n            suggestionsHeaderText: 'Suggested tags',\n            noResultsFoundText: 'No color tags found',\n        };\n\n        const suggestedTags: ITag[] = []\n            .map(item => ({ key: item, name: item }));\n\n        const listContainsTagList = (tag: ITag, tagList?: ITag[]) => {\n            if (!tagList || !tagList.length || tagList.length === 0) {\n                return false;\n            }\n            return tagList.some(compareTag => compareTag.key === tag.key);\n        };\n\n        const filterSuggestedTags = (filterText: string, tagList?: ITag[]): ITag[] => {\n            if (!filterText) {\n                return [];\n            }\n\n            let suggestion = suggestedTags.filter(\n                tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0 && !listContainsTagList(tag, tagList),\n            );\n            if (!suggestion.length) {\n                suggestion.push({ key: filterText, name: filterText });\n            }\n            return suggestion;\n        };\n\n        const getTextFromItem = (item: ITag) => item.name;\n\n        return (\n            <Dialog hidden={this.props.hidden} title={\"Log an event\"} className=\"event-dialog\">\n                <Label className=\"time-label\">{this.props.startTime?.toLocaleTimeString() + \" - \" + this.props.endTime?.toLocaleTimeString()}</Label>\n                <Label className=\"time-label\">{\"Total time \" + this.getTimeDiff()}</Label>\n                <TextField\n                    placeholder={\"Title\"}\n                    className=\"title-input\"\n                    onChange={(e, val) => this.setState({ title: val })}>\n                </TextField>\n                <TagPicker\n                    removeButtonAriaLabel=\"Remove\"\n                    selectionAriaLabel=\"Selected colors\"\n                    onResolveSuggestions={filterSuggestedTags}\n                    onChange={(items) => {\n                        console.log(\"items: \" + items?.map(t => t.name));\n                        this.setState({ tags: items?.map(t => t.name) ?? [] })\n                    }}\n                    onItemSelected={(item?) => { console.log(\"selected \" + item?.name); return item!; }}\n                    getTextFromItem={getTextFromItem}\n                    pickerSuggestionsProps={pickerSuggestionsProps}\n                    // itemLimit={2}\n                    disabled={false}\n                    inputProps={{\n                        ...inputProps,\n                        id: 'picker1',\n                        placeholder: 'Tags'\n                    }}\n                />\n\n                <DialogFooter >\n                    <PrimaryButton\n                        text=\"Log\"\n                        onClick={() => this.onSubmit()} />\n                    <DefaultButton text=\"Cancel\" onClick={() => this.onCancel()} />\n                </DialogFooter>\n\n            </Dialog>\n        );\n    }\n\n    getTimeDiff(): string {\n        if (!this.props.endTime || !this.props.startTime) {\n            return \"\";\n        }\n\n        const timespan = this.props.endTime.getTime() - this.props.startTime.getTime();\n        const timespan2 = moment.duration(timespan);\n        const hour = timespan2.hours();\n        const min = timespan2.minutes();\n        return (hour > 0 ? `${hour}h` : \"\") + `${min}m`;\n    }\n\n    onSubmit(): void {\n        let userEvents = UserEventManager.instance.getEvents();\n        let latestUserEvent = userEvents[userEvents.length - 1];\n\n        latestUserEvent.title = this.state.title;\n        latestUserEvent.endTime = this.props.endTime;\n        latestUserEvent.tags = new Set<string>(this.state.tags);\n\n        let dataStore = new UserEventStore();\n        dataStore.saveUserEvents(userEvents);\n\n        console.log(userEvents);\n        this.props.hideDialog();\n        // this.props.restartPlay();\n    }\n\n    onCancel() {\n        this.props.hideDialog();\n    }\n}\n\nexport default EventDialog;\n","import './Timer.scss';\n\nimport { Label } from '@fluentui/react';\nimport React from 'react';\nimport moment from 'moment';\n\nfunction delay(second: number): Promise<void> {\n    return new Promise(resolve =>\n        setTimeout(resolve, second * 1000));\n}\n\ninterface Props {\n    startTime?: Date;\n}\n\ninterface State {\n    timer: string;\n}\n\nclass Timer extends React.Component<Props, State> {\n    state: Readonly<State> = {\n        timer: \"00:00\",\n    };\n    started = false;\n\n    render() {\n        if (!this.started && this.props.startTime != null) {\n            this.started = true;\n            this.startTimer();\n        }\n\n        return (\n            <Label className=\"timer\">{this.state.timer}</Label>\n        );\n    }\n\n    async startTimer() {\n        var showColon = true;\n        while (this.props.startTime != null) {\n            let timespan = moment.duration(Date.now() - this.props.startTime.getTime());\n            let hour = timespan.hours();\n            let min = timespan.minutes();\n            let timer = (hour >= 10 ? \"\" : \"0\") + hour + (showColon ? \":\" : \" \") + (min >= 10 ? \"\" : \"0\") + min;\n            this.setState({ timer: timer });\n            showColon = !showColon;\n            await delay(1);\n        }\n        this.started = false;\n    }\n}\n\nexport default Timer;\n","import './EventList.scss';\n\nimport {\n    ConstrainMode,\n    DetailsList,\n    DetailsListLayoutMode,\n    IBasePickerSuggestionsProps,\n    IDetailsColumnRenderTooltipProps,\n    IDetailsHeaderProps,\n    IInputProps,\n    IRenderFunction,\n    IStackTokens,\n    ITag,\n    ScrollablePane,\n    ScrollbarVisibility,\n    SelectionMode,\n    Stack,\n    Sticky,\n    StickyPositionType,\n    TagPicker,\n    TooltipHost\n} from '@fluentui/react';\nimport React from 'react';\n// import moment from 'moment';\n\nimport { UserEvent } from './UserEvent';\n\ninterface Props {\n    events: UserEvent[];\n}\n\ninterface State {\n    filterEvent: (e: UserEvent) => boolean;\n}\n\nexport class EventList extends React.Component<Props, State>{\n    state: Readonly<State> = {\n        filterEvent: (e) => true,\n    }\n\n    _columns = [\n        { key: 'column1', name: 'Title', fieldName: 'title', minWidth: 100, maxWidth: 400, isResizable: true },\n        { key: 'column2', name: 'Start Time', fieldName: 'startTime', minWidth: 100, maxWidth: 400, isResizable: true },\n        { key: 'column3', name: 'End Time', fieldName: 'endTime', minWidth: 100, maxWidth: 400, isResizable: true },\n        // { key: 'column3', name: 'Duration', fieldName: 'duration', minWidth: 100, maxWidth: 400, isResizable: true },\n        { key: 'column4', name: 'Tags', fieldName: 'tags', minWidth: 100, maxWidth: 400, isResizable: true },\n    ];\n\n    render() {\n        const items = this.props.events\n            .filter(e => this.state.filterEvent(e))\n            .map((e, idx) => {\n                return {\n                    key: idx,\n                    title: e.title,\n                    startTime: e.startTime.toTimeString(),\n                    endTime: e.endTime?.toTimeString(),\n                    // duration: moment.duration(e.getDuration()).toString(),\n                    tags: [...e.tags].join(\"; \"),\n                };\n            });\n\n        const stackTokens: IStackTokens = {\n            childrenGap: 80, // this adds margin-top: 80px; otherwise ScrollablePane shows on top of TextField\n        };\n\n        const inputProps: IInputProps = {\n            onBlur: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onBlur called'),\n            onFocus: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onFocus called'),\n        };\n\n        const pickerSuggestionsProps: IBasePickerSuggestionsProps = {\n            suggestionsHeaderText: 'Suggested tags',\n            noResultsFoundText: 'No color tags found',\n        };\n\n        // should aggregate tags in data manager layer and pass as component props\n        const suggestedTags: ITag[] = [...this.props.events\n            .reduce((prev, curr) => {\n                curr.tags.forEach(t => prev.add(t));\n                return prev;\n            }, new Set<string>())]\n            .map(item => ({ key: item, name: item }));\n\n        const listContainsTagList = (tag: ITag, tagList?: ITag[]) => {\n            if (!tagList || !tagList.length || tagList.length === 0) {\n                return false;\n            }\n            return tagList.some(compareTag => compareTag.key === tag.key);\n        };\n\n        const filterSuggestedTags = (filterText: string, tagList?: ITag[]): ITag[] => {\n            if (!filterText) {\n                return [];\n            }\n\n            let suggestion = suggestedTags.filter(\n                tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0 && !listContainsTagList(tag, tagList),\n            );\n            if (!suggestion.length) {\n                suggestion.push({ key: filterText, name: filterText });\n            }\n            return suggestion;\n        };\n\n        const getTextFromItem = (item: ITag) => item.name;\n\n        return (\n            <div className=\"events-container\">\n                <Stack className=\"events-components\" verticalFill={true} tokens={stackTokens}>\n                    {/* <TextField\n                        className=\"filter\"\n                        label=\"Filter by tag:\"\n                        onChange={this._onFilter}\n                        styles={textFieldStyles}\n                    /> */}\n\n                    <TagPicker\n                        removeButtonAriaLabel=\"Remove\"\n                        selectionAriaLabel=\"Selected colors\"\n                        onResolveSuggestions={filterSuggestedTags}\n                        onChange={(items) => {\n                            console.log(\"items: \" + items?.map(t => t.name));\n\n                            this.setState({\n                                filterEvent: (e) => {\n                                    if (!Array.isArray(items) || items.length === 0) {\n                                        return true;\n                                    }\n\n                                    return items\n                                        .map(t => t.name)\n                                        .every(t => e.tags.has(t));\n                                    // const itemsSet = new Set(items.map(t => t.name));\n                                    // const intersection = [...e.tags].filter(t => itemsSet.has(t));\n                                    // return intersection.length > 0;\n                                },\n                            });\n                        }}\n                        onItemSelected={(item?) => { console.log(\"selected \" + item?.name); return item!; }}\n                        getTextFromItem={getTextFromItem}\n                        pickerSuggestionsProps={pickerSuggestionsProps}\n                        // itemLimit={2}\n                        disabled={false}\n                        inputProps={{\n                            ...inputProps,\n                            id: 'picker1',\n                        }}\n                    />\n\n                    <ScrollablePane className=\"events-table\" scrollbarVisibility={ScrollbarVisibility.auto}>\n                        <DetailsList\n                            compact={true}\n                            items={items}\n                            columns={this._columns}\n                            setKey=\"set\"\n                            layoutMode={DetailsListLayoutMode.justified}\n                            selectionMode={SelectionMode.none}\n                            constrainMode={ConstrainMode.unconstrained}\n                            onRenderDetailsHeader={onRenderDetailsHeader}\n\n                            onItemInvoked={() => console.log(\"clicked\")}\n                            ariaLabelForSelectionColumn=\"Toggle selection\"\n                            ariaLabelForSelectAllCheckbox=\"Toggle selection for all items\"\n                            checkButtonAriaLabel=\"select row\"\n                        />\n                    </ScrollablePane>\n                </Stack>\n            </div >\n        );\n    }\n\n    // private _onFilter = (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, text?: string): void => {\n    //     this.setState({\n    //         filterEvent: (e) => {\n    //             if (text) {\n    //                 for (const tag of e.tags) {\n    //                     if (tag.startsWith(text)) {\n    //                         return true;\n    //                     }\n    //                 }\n    //                 return false;\n    //             }\n    //             return true;\n    //         },\n    //     });\n    // };\n}\n\nconst onRenderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (detailsHeaderProps, defaultRender) => {\n    if (!detailsHeaderProps) {\n        return null;\n    }\n\n    const onRenderColumnHeaderTooltip: IRenderFunction<IDetailsColumnRenderTooltipProps> = tooltipHostProps => (\n        <TooltipHost {...tooltipHostProps} />\n    );\n    return (\n        <Sticky stickyPosition={StickyPositionType.Both}>\n            {defaultRender!({\n                ...detailsHeaderProps,\n                onRenderColumnHeaderTooltip,\n            })}\n        </Sticky>\n    );\n};\n","import { Stack, IStackTokens } from '@fluentui/react';\nimport { PrimaryButton } from '@fluentui/react/lib/Button';\nimport { FontIcon } from '@fluentui/react/lib/Icon';\nimport './LoggingMode.scss';\nimport React from 'react';\n\nimport EventDialog from './EventDialog';\nimport * as UserEventManager from \"./UserEventManager\";\nimport { UserEvent } from './UserEvent';\nimport Timer from './Timer';\nimport { EventList } from './EventList';\n\nclass LoggingMode extends React.Component<{ className?: string }> {\n    state = {\n        cookie: document.cookie,\n        onGoingEvent: this.initializeIsPlaying(),\n        hideDialog: true\n    };\n\n    private startTime?: Date = undefined;\n    private endTime?: Date = undefined;\n\n    render() {\n        const stackTokens: IStackTokens = {\n            childrenGap: 80, // this adds margin-top: 80px; otherwise ScrollablePane shows on top of TextField\n        };\n\n        return (\n            <div className={\"logging-mode-container \" + this.props.className}>\n                <Timer startTime={this.state.onGoingEvent?.startTime} />\n                <Stack className=\"timer-controls\" horizontal tokens={stackTokens}>\n                    {\n                        !this.state.onGoingEvent ?\n                            <PrimaryButton\n                                className=\"button\"\n                                onClick={() => this.onStartClicked()}\n                                allowDisabledFocus>\n                                <FontIcon\n                                    className=\"icon\"\n                                    aria-label=\"Play\"\n                                    iconName=\"Play\" />\n                            </PrimaryButton> :\n                            <PrimaryButton\n                                className=\"button\"\n                                onClick={() => this.onStopClicked()}\n                                allowDisabledFocus>\n                                <FontIcon\n                                    className=\"icon\"\n                                    aria-label=\"Stop\"\n                                    iconName=\"Stop\" />\n                            </PrimaryButton>\n                    }\n                    {/* <PrimaryButton\n                        className=\"button\"\n                        onClick={() => {}}\n                        disabled={!this.state.playing}>\n                        <FontIcon\n                            className=\"icon\"\n                            aria-label=\"Next\"\n                            iconName=\"Next\" />\n                    </PrimaryButton> */}\n                </Stack>\n\n                <EventDialog\n                    hidden={this.state.hideDialog}\n                    startTime={this.startTime}\n                    endTime={this.endTime}\n                    hideDialog={() => this.hideSubmitDialog()}\n                    restartPlay={() => this.startPlay()}\n                />\n\n                <EventList events={UserEventManager.instance.getEvents()} />\n            </div>\n        );\n    }\n\n    onStartClicked(): void {\n        this.startPlay();\n    }\n\n    startPlay(): void {\n        let currentTime = new Date();\n        let newEvent = new UserEvent(currentTime);\n        this.startTime = currentTime;\n        this.setState({ onGoingEvent: newEvent });\n        UserEventManager.instance.addEvent(newEvent);\n\n        console.log(\"start event: \" + currentTime);\n    }\n\n    onStopClicked(): void {\n        this.endTime = new Date();\n        this.showSubmitDialog();\n        this.setState({ onGoingEvent: undefined });\n\n        console.log(\"stop clicked: \" + this.endTime);\n    }\n\n    showSubmitDialog(): void {\n        this.setState({\n            hideDialog: false,\n        })\n    }\n\n    hideSubmitDialog(): void {\n        this.setState({\n            hideDialog: true,\n        })\n    }\n\n    initializeIsPlaying(): UserEvent | undefined {\n        const events = UserEventManager.instance.getEvents();\n        if (events.length > 0 && !events[events.length - 1].endTime) {\n            return events[events.length - 1];\n        }\n\n        return undefined;\n    }\n}\n\nexport default LoggingMode;\n","export class TimeUtil  {\n    static GetMonthDay(date:Date){\n        let m = date.getMonth()+1;\n        let d = date.getDate();\n        return m+\"/\"+d;\n    }\n   \n}\n\n","import './Bar.scss';\nimport * as UserEventManager from \"../UserEventManager\"\nimport React from 'react';\nimport moment from 'moment';\nimport { UserEvent } from '../UserEvent';\nimport {\n    DiscreteColorLegend,\n    HorizontalGridLines,\n    makeWidthFlexible,\n    VerticalBarSeries,\n    VerticalGridLines,\n    XAxis,\n    XYPlot,\n    YAxis\n} from 'react-vis';\nimport { TimeUtil } from '../TimeUtil';\n\nconst FlexibleXYPlot = makeWidthFlexible(XYPlot);\n\nfunction groupBy<T, K>(array: T[], keySelector: (arg0: T) => K) {\n    return array.reduce((rv, x) => {\n        let s = keySelector(x);\n        if (rv.has(s)) {\n            rv.get(s)!.push(x);\n        } else {\n            rv.set(s, [x]);\n        }\n        return rv;\n    }, new Map<K, T[]>());\n}\n\nexport class Bar extends React.Component<{ events?: UserEvent[] }> {\n    state = {\n\n    };\n\n    render() {\n        let events = this.props.events ?? UserEventManager.instance.getEvents();\n        var eventByType = groupBy(events, e => e.title);\n\n        var timeByEventDay = Array.from(eventByType.keys()).map(type => {\n            var events = eventByType.get(type);\n            var eventsByDay = groupBy(events!, e => TimeUtil.GetMonthDay(e.startTime));\n            return { type, times: Array.from(eventsByDay.keys()).map(day => ({ x: day, y: eventsByDay.get(day)!.reduce((s, i) => s + moment.duration(i.getDuration()).asHours(), 0.0) })) };\n        });\n        const barWidth = 0.5;\n        var colors = ['#12939A', \"#5c94ed\"];\n        var eventTypes = Array.from(eventByType.keys());\n        var eventColorMap = new Map<string, string>();\n        for (let i = 0; i < eventTypes.length; ++i) {\n            eventColorMap.set(eventTypes[i]!, \"#\" + Math.floor(Math.random() * 16777215).toString(16));\n        }\n\n        return (<div>\n\n            <FlexibleXYPlot\n                animation\n                className=\"clustered-stacked-bar-chart-example\"\n                xType=\"ordinal\"\n                stackBy=\"y\"\n                height={400}\n            >\n                {Array.from(eventColorMap.keys()).map(eventType =>\n                    <DiscreteColorLegend\n                        orientation=\"horizontal\"\n                        items={[\n                            {\n                                title: eventType,\n                                color: eventColorMap.get(eventType)\n                            }\n                        ]}\n                    />)}\n\n                <VerticalGridLines />\n                <HorizontalGridLines />\n                <XAxis />\n                <YAxis />\n                {timeByEventDay.map(t =>\n                    <VerticalBarSeries\n                        barWidth={barWidth}\n                        color={eventColorMap.get(t.type!)}\n                        data={t.times}\n                    />\n                )}\n            </FlexibleXYPlot>\n        </div>);\n    }\n\n\n}","import './Dashboard.scss';\n\nimport { Label } from '@fluentui/react';\nimport React, { ReactNode } from 'react';\nimport moment from 'moment';\nimport '../node_modules/react-vis/dist/style.css';\nimport { ArcSeries, HorizontalGridLines, LineSeries, makeWidthFlexible, VerticalGridLines, XAxis, XYPlot, YAxis } from 'react-vis';\nimport { Bar } from './plots/Bar';\nimport { UserEvent } from './UserEvent';\n\nconst FlexibleXYPlot = makeWidthFlexible(XYPlot); \nexport class Dashboard extends React.Component<{ className?: string, events?:UserEvent[] }> {\n    state = {\n\n    };\n\n    render() {\n        return (\n            <div className={\"dashboard-container\" + \" \" + this.props.className}>\n                <div className=\"plot\">\n                    <Bar events={this.props.events}/>\n                </div>\n                \n                \n            </div>\n        )\n    }\n}\n\nfunction AxisOn0({\n    xDomain = [-5, 5],\n    yDomain = [-5, 5],\n    xAxisOn0 = true,\n    yAxisOn0 = true,\n    verticalTickValues = [],\n    horizontalTickValues = [0]\n}): ReactNode {\n    const PI =  Math.PI;\n    const myData = [\n        {angle0: 0, angle: Math.PI / 4, opacity: 0.2, radius: 2, radius0: 1},\n        {angle0: PI / 4, angle: 2 * PI / 4, radius: 100, radius0: 0},\n        {angle0: 2 * PI / 4, angle: 3 * PI / 4, radius: 2, radius0: 0},\n        {angle0: 3 * PI / 4, angle: 4 * PI / 4, radius: 2, radius0: 0},\n        {angle0: 4 * PI / 4, angle: 5 * PI / 4, radius: 2, radius0: 0},\n        {angle0: 0, angle: 5 * PI / 4, radius: 1.1, radius0: 0.8}\n      ]\n    return (\n        \n        <XYPlot\n        xDomain={[-1, 1]}\n        yDomain={[-1, 1]}\n        width={300}\n        height={300}>\n        <ArcSeries\n          animation\n          radiusType={'literal'}\n          center={{x: 0, y: 0}}\n          data={myData}\n          colorType={'literal'}/>\n      </XYPlot>\n    );\n}","import './App.scss';\n\nimport React from 'react';\nimport LoggingMode from './LoggingMode';\nimport { Dashboard } from './Dashboard';\nimport { CommandBarButton, DefaultButton, FontIcon, Panel, PanelType, Stack } from '@fluentui/react';\n\nclass App extends React.Component {\n    state = {\n        cookie: document.cookie,\n        isPanelOpen: false,\n        selectedMode: \"logging\"\n    };\n\n    render() {\n        const app = this.state.selectedMode === \"logging\"\n            ? <LoggingMode className=\"App-content\" />\n            : <Dashboard className=\"App-content\" />;\n\n        return (\n            <div className=\"App\">\n                <div className=\"panel-container\">\n                    <DefaultButton className=\"burger-button\" onClick={() => this.setState({ isPanelOpen: true })}>\n                        <FontIcon\n                            className=\"icon\"\n                            aria-label=\"GlobalNavButton\"\n                            iconName=\"GlobalNavButton\" />\n                    </DefaultButton>\n                    <Panel\n                        className=\"nav-panel\"\n                        isLightDismiss\n                        isOpen={this.state.isPanelOpen}\n                        onDismiss={() => this.setState({ isPanelOpen: false })}\n                        headerText=\"Mode\"\n                        type={PanelType.smallFixedNear}>\n                        <Stack>\n                            <CommandBarButton text=\"Logging\" onClick={() => this.setState({ selectedMode: \"logging\" })} />\n                            <CommandBarButton text=\"Dashboard\" onClick={() => this.setState({ selectedMode: \"dashboard\" })} />\n                        </Stack>\n                    </Panel>\n                </div>\n                {app}\n            </div>);\n\n    }\n}\n\nexport default App;\n","import {\n    IBasePickerSuggestionsProps,\n    IInputProps,\n    ITag,\n    TagPicker\n} from \"@fluentui/react\";\nimport React from \"react\";\nimport { UserEvent } from \"../UserEvent\";\nimport * as UserEventManager from \"../UserEventManager\"\nimport { UserEventStore } from \"../UserEventStore\";\n\nclass Debug extends React.Component {\n    render() {\n        return (\n            <div className=\"DebugPage\" >\n                <h1>Lyubishchev</h1>\n                <p>\n                    <button\n                        onClick={() => {\n                            let eventName = [\n                                \"Test Event\",\n                                Math.random().toString(16).substr(2, 4),\n                            ].join(\" \");\n                            let newEvent = new UserEvent(new Date());\n                            UserEventManager.instance.addEvent(newEvent);\n\n                            console.log(\"added event: \" + eventName);\n                        }}>\n                        Start an event\n                    </button>\n                </p>\n\n                <p>\n                    <button\n                        onClick={() => {\n                            let userEvents = UserEventManager.instance.getEvents();\n                            let latestUserEvent = userEvents[userEvents.length - 1];\n\n                            latestUserEvent.endTime = new Date();\n\n                            let dataStore = new UserEventStore();\n                            dataStore.saveUserEvents(userEvents);\n\n                            console.log(\"updated event: \" + latestUserEvent.title);\n                        }}>\n                        End a started event\n                    </button>\n                </p>\n\n                <p>\n                    <button onClick={() => {\n                        let userEvents = UserEventManager.instance.getEvents();\n                        console.log(userEvents);\n                    }}>\n                        print events\n                    </button>\n                </p>\n\n                <p>\n                    <button onClick={() => {\n                        let userEvents = UserEventManager.instance.getEvents();\n                        console.log(userEvents.map((element) => {\n                            return {\n                                ...element,\n                                duration: element.getDuration()\n                            };\n                        }));\n                    }}>\n                        print events with derived details\n                    </button>\n                </p>\n\n                <p>\n                    <button onClick={() => {\n                        UserEventManager.instance.clearEvents();\n                        console.log(\"cleared all events\");\n                    }}>\n                        clear events\n                    </button>\n                </p>\n\n                <p>\n                    <button onClick={() => {\n                        UserEventManager.instance.generateRandomEvents();\n                        console.log(\"random events generated\");\n                    }}>\n                        generate random events\n                    </button>\n                </p>\n\n                <TagPicker\n                    removeButtonAriaLabel=\"Remove\"\n                    selectionAriaLabel=\"Selected colors\"\n                    onResolveSuggestions={filterSuggestedTags}\n                    onChange={(items) => console.log(\"items: \" + items?.map(t => t.name))}\n                    onItemSelected={(item?) => { console.log(\"selected \" + item?.name); return item!; }}\n                    getTextFromItem={getTextFromItem}\n                    pickerSuggestionsProps={pickerSuggestionsProps}\n                    itemLimit={2}\n                    disabled={false}\n                    inputProps={{\n                        ...inputProps,\n                        id: 'picker1',\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\n// begin TagPicker test\n\nconst inputProps: IInputProps = {\n    onBlur: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onBlur called'),\n    onFocus: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onFocus called'),\n};\n\nconst pickerSuggestionsProps: IBasePickerSuggestionsProps = {\n    suggestionsHeaderText: 'Suggested tags',\n    noResultsFoundText: 'No color tags found',\n};\n\nconst testTags: ITag[] = [\n    'black',\n    'blue',\n    'brown',\n    'cyan',\n    'green',\n    'magenta',\n    'mauve',\n    'orange',\n    'pink',\n    'purple',\n    'red',\n    'rose',\n    'violet',\n    'white',\n    'yellow',\n].map(item => ({\n    key: item,\n    name: item\n}));\n\nconst listContainsTagList = (tag: ITag, tagList?: ITag[]) => {\n    if (!tagList || !tagList.length || tagList.length === 0) {\n        return false;\n    }\n    return tagList.some(compareTag => compareTag.key === tag.key);\n};\n\nconst filterSuggestedTags = (filterText: string, tagList?: ITag[]): ITag[] => {\n    if (!filterText) {\n        return [];\n    }\n\n    let suggestion = testTags.filter(\n        tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0 && !listContainsTagList(tag, tagList),\n    );\n    if (!suggestion.length) {\n        suggestion.push({ key: filterText, name: filterText });\n    }\n    return suggestion;\n};\n\nconst getTextFromItem = (item: ITag) => item.name;\n\n// end TagPicker test\n\nexport default Debug;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport App from './App';\nimport Debug from './pages/Debug';\nimport { initializeIcons } from '@fluentui/react';\nimport { Dashboard } from './Dashboard';\n\n// let routeDict = {\n//     \"/\": <IndexPage />,\n//     \"/app\": <App />,\n//     \"/debug\": <Debug />,\n// }\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <nav>\n                <ul>\n                    <li>\n                        <Link to=\"/app\">App</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/debug\">Debug</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/dashboard\">Dashboard</Link>\n                    </li>\n                </ul>\n            </nav>\n        );\n    }\n}\ninitializeIcons();\nReactDOM.render(\n    // <React.StrictMode>\n    //     <App />\n    // </React.StrictMode>,\n    // <Router>\n    //     <App />\n    // </Router>,\n    // routeDict[window.location.pathname],\n    <Router>\n        <div>\n            <Switch>\n                <Route exact path=\"/home\">\n                    <Home />\n                </Route>\n                <Route path=\"/\">\n                    <App />\n                </Route>\n                <Route path=\"/debug\">\n                    <Debug />\n                </Route>\n                <Route path=\"/dashboard\">\n                    <Dashboard />\n                </Route>\n            </Switch>\n        </div>\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}